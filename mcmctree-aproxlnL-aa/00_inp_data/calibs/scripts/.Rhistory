# generated when sampling from the prior (`delcol_prior`)
##> NOTE: If you ran `MCMCtree` with `clock = 2` or `clock = 3` when
##> sampling from the prior, you will also need to count the `sigma2*`
##> columns! We ran `clock = 1` so that the analyses ran quicker, and thus
##> we only have `mu*` columns.
delcol_prior <- c( 1, 1, 2 )
# automatically accounted for in the in-house R functions that you will
# subsequently use. E.g., you expect to see as many `mu[0-9]` as alignment
# blocks you have in your sequence file! E.g., if you had two alignment blocks,
# you would speciy `delcol_prior <- 2`. Please modify the value/s below
# (depending on having one or more datasets) according to the `mcmc.txt` file
# generated when sampling from the prior (`delcol_prior`)
##> NOTE: If you ran `MCMCtree` with `clock = 2` or `clock = 3` when
##> sampling from the prior, you will also need to count the `sigma2*`
##> columns! We ran `clock = 1` so that the analyses ran quicker, and thus
##> we only have `mu*` columns.
delcol_prior <- c( 1 )
#  The format accepted has three parameters: xi (location, mean root age),
#  omega (scale), alpha (shape). Accepted format:
#  >> SN(5.8300,0.0590,0.1120)
#
#
# The next command executes the `read_calib_f` in-house function, which reads
# your input files (semicolon-separated files). The path to this directory is
# what the argument `main_dir` needs. The argument `f_names` requires the name
# of the file/s that you have used. Argument `dat` requires the same global
# object that you have created at the beginning of the script.
dat    <- c( "mtcDNApri" )
dat_ff <- list.files( path = "../00_inp_data/calibs/inp_calibs/",
pattern = "*csv",
full.names = FALSE )
##> CHECK
# If there was a `margVScalib` generated, do not use it! If not, this means
# that your `csv` file has already the required format to proceed
is_margcsv <- grep( pattern = "margVScalib", x = dat_ff )
if( length( is_margcsv ) > 0 ){
dat_ff <- dat_ff[-is_margcsv]
}
##> END CHECK
# Get formatted calibration information
calib_nodes <- read_calib_f( main_dir = paste( "../00_inp_data/calibs/inp_calibs/",
sep = "" ),
f_names = dat_ff,
dat = "mtcdna", head_avail = TRUE )
# automatically accounted for in the in-house R functions that you will
# subsequently use. E.g., you expect to see as many `mu[0-9]` as alignment
# blocks you have in your sequence file! E.g., if you had two alignment blocks,
# you would speciy `delcol_prior <- 2`. Please modify the value/s below
# (depending on having one or more datasets) according to the `mcmc.txt` file
# generated when sampling from the prior (`delcol_prior`)
##> NOTE: If you ran `MCMCtree` with `clock = 2` or `clock = 3` when
##> sampling from the prior, you will also need to count the `sigma2*`
##> columns! We ran `clock = 1` so that the analyses ran quicker, and thus
##> we only have `mu*` columns.
delcol_prior <- c( 1 )
# 7. Path to the directory where the subdirectories where each chain ran for
# each dataset are saved In this case, we will have the path to the directory
# where the analyses when sampling from the prior took place (i.e., directory
# that contains the subdirectories from `1` to `n`, where `n` is the number
# of chains we ran).
path_prior <- vector( mode = "character", length = c( length( dat ) ) )
# 7. Path to the directory where the subdirectories where each chain ran for
# each dataset are saved In this case, we will have the path to the directory
# where the analyses when sampling from the prior took place (i.e., directory
# that contains the subdirectories from `1` to `n`, where `n` is the number
# of chains we ran).
path_prior <- vector( mode = "character", length = c( length( dat ) ) )
for( i in 1:c( length( dat ) ) ){
path_prior[i] <- paste( mcmc_dir, "00_prior/NODAT/", i, "/",
sep = "" )
}
#--------------#
# ANALYSE DATA #
#--------------#
# Define object names
num_dirs      <- num_chains
delcol        <- delcol_prior
path          <- path_prior
num_divt      <- num_divt
node_calib    <- calib_nodes[[ 1 ]] # There is 1 matrix (same for all dat)
node_calib    <- calib_nodes[[ 1 ]] # Get the 1st element, only 1 set of cals!
dataset       <- dat
perc          <- perc
def_samples   <- def_samples
prior         <- TRUE
out_dat       <- path_prior
time_unit     <- 100
out_file_pdf  <- paste( "Convergence_plot_prior_", dat, sep = "" )
out_title_pdf <- paste( "NODAT_", dat, sep = "" )
th            <- 0.1
##----------------------------------------------------------------------------##
cat( " - - - - - - - - - - - - - \n\n" )
cat( "[[ OPTIONS SPECIFIED ]]\n\n",
"Number of chains: ", num_chains, "\n",
"Number of divergence times estimated: ", num_divt, "\n",
"Samples specified in the control file: ", def_samples, "\n",
"Quantiles that will be calculated: [", 1-perc, "-", perc, "]\n",
"Number of \"mu\" columns in \"mcmc.txt\" file (one per dataset): ",
delcol_prior, "\n",
"Paths:\n" )
path_prior
cat( "\n Data ID (one per dataset): ", dat, "\n",
"Running from the prior?", prior, "\n",
"Time unit: ", time_unit, "\n",
"Threshold to check convergence in tails: ", th, "\n",
"Flag for output files (one per dataset): ", out_title_pdf, "\n" )
cat( "\n[[ CALIBRATIONS ]] \n\n" )
node_calib
cat( "\n - - - - - - - - - - - - - \n" )
# Generate a list to keep all the returned objects
sum_prior_QC          <- vector( "list", length( path_prior ) )
names( sum_prior_QC ) <- dataset
#-------------------#
# CLEAN ENVIRONMENT #
#-------------------#
rm( list = ls( ) )
#-----------------------------------------------#
# LOAD PACKAGES, FUNCTIONS, AND SET ENVIRONMENT #
#-----------------------------------------------#
# This package lets you find automatically the path to a specific location
# in your file structure
# If you have not installed this package, you will need to install it.
# You can uncomment the following line to do this:
#install.packages( "rstudioapi" )
library( rstudioapi )
# Get the path of current open file
path_to_file <- getActiveDocumentContext()$path
# Get working directory path
wd      <- paste( dirname( path_to_file ), "/", sep = "" )
wd.name <- dirname( path_to_file )
# Set working directory
setwd( wd )
#-------------------------------------------------------------#
# DEFINE GLOBAL VARIABLES -- modify according to your dataset #
#-------------------------------------------------------------#
# Name that you want the output calibrated tree file to have.
# E.g. the file name will have the following format
# "<out_name>_calib_MCMCtree.tree".
out_name <- c( "mtcdnapri" )
num_dat  <- length( out_name )
# ```
# name;tip1;tip2;MCMCtree
# root;sp1;sp2;'B(0.256,1.34,0.025,1e-300)'
# ```
#
# NOTE: Always check that there is at least one blank line at the
# end of the this text file! Otherwise, you will get an error telling you that
# there is an incomplete final line in these files. This file needs to be
# already in PHYLIP format. Please follow the same format as used in the
# example tree file provided.
path_textconv <- c( "../../00_inp_data/calibs/raw_calibs/calibrations.txt" )
# ```
# name;tip1;tip2;MCMCtree
# root;sp1;sp2;'B(0.256,1.34,0.025,1e-300)'
# ```
#
# NOTE: Always check that there is at least one blank line at the
# end of the this text file! Otherwise, you will get an error telling you that
# there is an incomplete final line in these files. This file needs to be
# already in PHYLIP format. Please follow the same format as used in the
# example tree file provided.
path_textconv <- c( "../raw_calibs/calibrations.txt" )
path_textconv
calibrations_all <- read.table( file = path_textconv,
stringsAsFactors = FALSE, sep = ";",
blank.lines.skip = TRUE, header = TRUE,
colClasses = rep( "character", 4 ) )
calibrations <- keep_indexes <- ind_dup <- nodes_dup <- tt_all <-
vector( mode = "list", num_dat )
calibrations[[ 1 ]] <- calibrations_all
names( calibrations ) <- names( keep_indexes )  <- names( ind_dup ) <-
names( nodes_dup ) <- names( tt_all ) <- c( "mtcdnapri" )
# Path to tree
path_tree <- c( "../../mtCDNApri.trees" )
path_tree
for( c in 1:length( calibrations ) ){
cat( "\n[[ ANALYSING CALIBRATION FILE ", names(calibrations)[c], " ]]\n" )
tt_ape <- ape::read.tree( file = path_tree[c] )
keep_indexes[[c]] <- matrix( 0, nrow = length(rownames(calibrations[[c]])),
ncol = 3 )
# Generate empty vector with as many entries as nodes in the tree
tt_ape$node.label <- rep( NA, tt_ape$Nnode )
for( i in 1:length(rownames(calibrations[[c]])) ){
# Get calibration in the same format input by the user
node_lab <- calibrations[[c]][i,4]
# Get MRCA for these two tips
mrca <- ape::getMRCA( phy = tt_ape, tip = c( calibrations[[c]][i,2],
calibrations[[c]][i,3]) )
keep_indexes[[c]][i,1] <- mrca-ape::Ntip(tt_ape)
keep_indexes[[c]][i,2] <- calibrations[[c]][i,1]
keep_indexes[[c]][i,3] <- paste( calibrations[[c]][i,2], "-",
calibrations[[c]][i,3], "-",
node_lab, sep = "" )
print( mrca-ape::Ntip( tt_ape ) )
# Replace node label accordingly
tt_ape$node.label[mrca-ape::Ntip(tt_ape)] <- paste0( "[",
calibrations[[c]][i,1],
"]", collapse = "" )
}
# Find duplicates
ind_dup[[c]]   <- which( duplicated(keep_indexes[[c]][,1]) == TRUE )
nodes_dup[[c]] <- which( keep_indexes[[c]][,1] %in% as.numeric( keep_indexes[[c]][ind_dup[[c]],1] ) )
keep_indexes[[c]][nodes_dup[[c]],]
# Save tree with node labels
tt_all[[c]] <- tt_ape
}
##>> ---
## CHECK for duplicates
ind_dup
# Remove "NA" from the labs
for( c in 1:length( calibrations ) ){
ind_na_bools <- is.na( x = tt_all[[c]]$node.label )
ind_na       <- which( ind_na_bools == TRUE )
tt_all[[c]]$node.label[ind_na] <- ""
# Write PHYLIP header, then the calibrated tree
writeLines( text = paste( length(tt_all[[c]]$tip.label ), " 1", sep = "" ),
con = paste( "../raw_calibs/cals_only_",
names( calibrations )[c], ".tree", sep = "" ) )
ape::write.tree( phy = tt_all[[c]],
file = paste( "../raw_calibs/cals_only_",
names( calibrations )[c], ".tree", sep = "" ),
append = TRUE )
}
#>> TEST
tt_all[[1]]$node.label[c(1,2,5)]
#>> TEST
tt_all[[1]]$node.label[c(1,2,4)]
#---------------------------------#
# READ TREE AND CALIBRATIONS FILE #
#---------------------------------#
# Read tree and get phylip header
# NOTE: Make always sure that there is at least one blank line at the
# end of the tree file! Otherwise, you will get an error telling you that
# there is an incomplete final line in these files.
tt_name <- c( "../raw_calibs/cals_only_mtcdnapri.tree" )
#---------------------------------#
# READ TREE AND CALIBRATIONS FILE #
#---------------------------------#
# Read tree and get phylip header
# NOTE: Make always sure that there is at least one blank line at the
# end of the tree file! Otherwise, you will get an error telling you that
# there is an incomplete final line in these files.
tt_name <- c( "../raw_calibs/cals_only_mtcdnapri.tree" )
for( t in 1:length( tt_name ) ){
#-------------------#
# Get PHYLIP header #
#-------------------#
tt            <- readLines( tt_name[t] )
phylip.header <- tt[1]
tt            <- tt2 <- tt3 <- tt[2]
#--------------------------------#
# REPLACE TAGS WITH CALIBRATIONS #
#--------------------------------#
# Replace calibration names with corresponding calibration
for( j in 1:length( rownames( calibrations[[t]] ) ) ){
# Get node label as input by user
node_lab <- calibrations[[t]][j,4]
# Get rid of unnecessary notation for susbequent formatting
tmp_calib <- gsub( x = node_lab, pattern = "\\(..*",
replacement = "" )
tmp_calib <- gsub( x = tmp_calib, pattern = "[0-9]..*",
replacement = "" )
# Conditional is used so that the single quotation marks are only kept
# in the upper-bound calibration for the root. Inequality calibrations
# do not require single quotation marks
if( tmp_calib == 'B' || tmp_calib == 'U' || tmp_calib == 'L' ){
tt <- gsub( pattern = paste0( "\\[", calibrations[[t]][j,1], "\\]" ),
x = tt,
replacement = paste( "'", node_lab, "'", sep = "" ) )
}else{ # For cross-braced nodes
tt <- gsub( pattern = paste0( "\\[", calibrations[[t]][j,1], "\\]" ),
x = tt,
replacement = paste( node_lab, sep = "" ) )
}
# Copy to visualise in `FigTree`
reps <- gsub( x = gsub( x = gsub( x = gsub( x = gsub( x = node_lab,
pattern = "\\{",
replacement = "(" ),
pattern = "\\}",
replacement = ")" ),
pattern = "\\[|\\]", replacement = "" ),
pattern = "\\#", replacement = "flag" ),
pattern = " ", replacement = "-" )
# For cross-braced calibrations without fossil
if( tmp_calib == '#' ){
reps <- gsub( x = gsub( x = reps, pattern = "\\#", replacement = "flag" ),
pattern = "\\]", replacement = "" )
tt2 <- gsub( pattern = paste0( "\\[", calibrations[[t]][j,1], "\\]" ),
x = tt2,
replacement = paste0( "'", reps, "-", calibrations[[t]][j,1],
"'", collapse = "" ) )
}else{ # For the rest of calibrations
tt2 <- gsub( pattern = paste0( "\\[", calibrations[[t]][j,1], "\\]" ),
x = tt2,
replacement = paste0( "'", reps, "-", calibrations[[t]][j,1],
"'", collapse = "" ) )
}
# Generate an uncalibrated tree for `BASEML`/`CODEML`!
tt3 <- gsub( pattern = paste0( "\\[", calibrations[[t]][j,1], "\\]" ),
x = tt3,
replacement = "" )
}
#-------------------------------#
# WRITE CALIBRATED TREE IN FILE #
#-------------------------------#
out_dir <- "../../tree_display/"
if( ! dir.exists( "../../tree_display/" ) ){
dir.create( "../../tree_display/" )
}
# Check if `out_name` != `names(calibrations)[t]`
if( out_name == names( calibrations )[t] ){
out_fullname <- paste( out_name )
}else{
out_fullname <- paste( out_name,  names( calibrations )[t], sep = "_" )
}
# Write calibrated tree file and file to visualise in `FigTree`
write( x = phylip.header, file = paste( out_dir, out_fullname,
"_calib_MCMCtree.tree", sep = "" ) )
write( x = tt, file = paste( out_dir, out_fullname,
"_calib_MCMCtree.tree", sep = "" ),
append = TRUE )
write( x = phylip.header, file = paste( out_dir, out_fullname,
"_fordisplay_calib_MCMCtree.tree",
sep = "" ) )
write( x = tt2, file = paste( out_dir, out_fullname,
"_fordisplay_calib_MCMCtree.tree", sep = "" ),
append = TRUE )
# Write an uncalibrated tree file, only once (first iteration)!
if( t == 1 ){
write( x = phylip.header, file = paste( out_dir, out_fullname,
"_uncalib.tree", sep = "" ) )
write( x = tt3, file = paste( out_dir, out_fullname,
"_uncalib.tree", sep = "" ),
append = TRUE )
}
}
#-------------------#
# CLEAN ENVIRONMENT #
#-------------------#
rm( list = ls( ) )
#-----------------------------------------------#
# LOAD PACKAGES, FUNCTIONS, AND SET ENVIRONMENT #
#-----------------------------------------------#
# This package lets you find automatically the path to a specific location
# in your file structure
# If you have not installed this package, you will need to install it.
# You can uncomment the following line to do this:
#install.packages( "rstudioapi" )
library( rstudioapi )
# Get the path to current open R script and find main dir
path_to_file <- getActiveDocumentContext()$path
wd <- paste( dirname( path_to_file ), "/", sep = "" )
setwd( wd )
# This script and the `Functions.R` script are saved under
# a directory called `scripts`. We will remove this part from
# the path to find our home directory
home_dir <- gsub( pattern = "scripts/", replacement = "", x = wd )
# Load main script with all functions required below
source( file = "../../../src/Functions.R" )
# Load main script with all functions required below
source( file = "../../src/Functions.R" )
#-------------------------------------------------------------#
# DEFINE GLOBAL VARIABLES -- modify according to your dataset #
#-------------------------------------------------------------#
# Read trees
## tt_list[[ j ]][[ 1 ]]: tree with node labels as of `MCMCtree`
## tt_list[[ j ]][[ 2 ]]: tree with node labels including `MCMCtree` notation
#                         and node name
# Put them in a list (useful if more than one dataset)
dat <- c( "mtcdnapri" )
tt_list <- vector( mode = "list", length = 1 )
names( tt_list ) <- dat
for( i in 1:length( dat ) ){
cat( "[[ Evaluating dataset ", dat[i], " ]]\n" )
tt_list[[ i ]] <- vector( mode = "list", length = 2 )
if( length( dat ) > 1 ){
tt_list[[ i ]][[ 1 ]] <- ape::read.tree( file = paste( "../01_MCMCtree/00_prior/",
"node_tree_", i, ".tree",
sep = "" ) )
}else{
tt_list[[ i ]][[ 1 ]] <- ape::read.tree( file = paste( "../01_MCMCtree/00_prior/",
"node_tree.tree",
sep = "" ) )
}
# Get the tree in a format that can be read by FigTree, where next to
# `MCMCtree` notation you will see the name you gave to such calibration
tt_list[[ i ]][[ 2 ]] <- ape::read.tree( file = paste( "../../00_inp_data/tree_display/",
dat[i],
"_fordisplay_calib_MCMCtree.tree",
sep = "" ) )
}
#-------------------------------------------------------------#
# DEFINE GLOBAL VARIABLES -- modify according to your dataset #
#-------------------------------------------------------------#
# Read trees
## tt_list[[ j ]][[ 1 ]]: tree with node labels as of `MCMCtree`
## tt_list[[ j ]][[ 2 ]]: tree with node labels including `MCMCtree` notation
#                         and node name
# Put them in a list (useful if more than one dataset)
dat <- c( "mtcdnapri" )
tt_list <- vector( mode = "list", length = 1 )
names( tt_list ) <- dat
for( i in 1:length( dat ) ){
cat( "[[ Evaluating dataset ", dat[i], " ]]\n" )
tt_list[[ i ]] <- vector( mode = "list", length = 2 )
if( length( dat ) > 1 ){
tt_list[[ i ]][[ 1 ]] <- ape::read.tree( file = paste( "../../02_PAML/01_MCMCtree/00_prior/",
"node_tree_", i, ".tree",
sep = "" ) )
}else{
tt_list[[ i ]][[ 1 ]] <- ape::read.tree( file = paste( "../../02_PAML/01_MCMCtree/00_prior/",
"node_tree.tree",
sep = "" ) )
}
# Get the tree in a format that can be read by FigTree, where next to
# `MCMCtree` notation you will see the name you gave to such calibration
tt_list[[ i ]][[ 2 ]] <- ape::read.tree( file = paste( "../../00_inp_data/tree_display/",
dat[i],
"_fordisplay_calib_MCMCtree.tree",
sep = "" ) )
}
# Start calibration information file for MCMC diagnostics with header
if( ! dir.exists( "../../00_inp_data/calibs/inp_calibs" ) ){
dir.create( "../../00_inp_data/calibs/inp_calibs" )
}
for( i in 1:length(dat) ){
write( x = "Calib;node;Prior",
file = paste( "../../00_inp_data/calibs/inp_calibs/Calibnodes_",
dat[i], ".csv", sep = "" ) )
write( x = "Calib;node;Prior",
file = paste( "../../00_inp_data/calibs/inp_calibs/Calibnodes_",
dat[i], "_margVScalib.csv",
sep = "" ) )
}
# Now, populate the output file with the info for the rest of the nodes
for( j in 1:length(dat) ){
# Start counter to see if that file has been created or not
count_margVScalib <- 0
cat( "\n\n[[ Evaluating tree for dataset ", dat[j], " ]]\n" )
for( i in 1:length( tt_list[[ j ]][[ 2 ]]$node.label ) ){
if( tt_list[[ j ]][[ 2 ]]$node.label[i] != "" ){
tmp_name <- gsub( x = gsub( x = tt_list[[ j ]][[ 2 ]]$node.label[i],
pattern = "..*\\)-",
replacement = "" ), pattern = "'",
replacement =  "" )
tmp_dist <- gsub( x = gsub( x = tt_list[[ j ]][[ 2 ]]$node.label[i],
pattern = "\\)-..*",
replacement = "\\)" ), pattern = "'",
replacement = "" )
is_notdist <- grep( x = tmp_dist, pattern = "flag" )
if( length( is_notdist ) > 0 ){
write( x = paste( tmp_name, ";", tt_list[[ j ]][[ 1 ]]$node.label[i],
";", tmp_dist, sep = "" ),
file = paste( "../../00_inp_data/calibs/inp_calibs/Calibnodes_",
dat[j], "_margVScalib.csv", sep = "" ),
append = TRUE )
count_margVScalib <- count_margVScalib + 1
}
cat( paste( tmp_name, ";", tt_list[[ j ]][[ 1 ]]$node.label[i], ";",
tmp_dist, "\n", sep = "" ) )
write( x = paste( tmp_name, ";", tt_list[[ j ]][[ 1 ]]$node.label[i],
";", tmp_dist, sep = "" ),
file = paste( "../../00_inp_data/calibs/inp_calibs/Calibnodes_",
dat[j], ".csv", sep = "" ), append = TRUE )
}
}
# Remove second csv if not needed
if( count_margVScalib == 0 ){
unlink( x = paste( "../../00_inp_data/calibs/inp_calibs/Calibnodes_",
dat[j], "_margVScalib.csv", sep = "" ) )
}
}
#-------------------#
# CLEAN ENVIRONMENT #
#-------------------#
rm( list = ls( ) )
#-----------------------------------------------#
# LOAD PACKAGES, FUNCTIONS, AND SET ENVIRONMENT #
#-----------------------------------------------#
# This package lets you find automatically the path to a specific location
# in your file structure
# If you have not installed this package, you will need to install it.
# You can uncomment the following line to do this:
#install.packages( "rstudioapi" )
library( rstudioapi )
# Get the path of current open file
path_to_file <- getActiveDocumentContext()$path
# Get working directory path
wd      <- paste( dirname( path_to_file ), "/", sep = "" )
wd.name <- dirname( path_to_file )
# Set working directory
setwd( wd )
#-------------------#
# CLEAN ENVIRONMENT #
#-------------------#
rm( list = ls( ) )
#-----------------------------------------------#
# LOAD PACKAGES, FUNCTIONS, AND SET ENVIRONMENT #
#-----------------------------------------------#
# This package lets you find automatically the path to a specific location
# in your file structure
# If you have not installed this package, you will need to install it.
# You can uncomment the following line to do this:
#install.packages( "rstudioapi" )
library( rstudioapi )
# Get the path of current open file
path_to_file <- getActiveDocumentContext()$path
# Get working directory path
wd      <- paste( dirname( path_to_file ), "/", sep = "" )
wd.name <- dirname( path_to_file )
# Set working directory
setwd( wd )
